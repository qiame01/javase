
--------------------------------------------------------------------------------------------------------------------------
2. static修饰方法(静态方法):
	1. 在方法前面加关键字static
	2. 调用：类名.方法名()、 对象.方法名()
	3. 静态方法无法访问非静态属性,静态方法不存在重写
	4. 应用：如果方法无需访问'成员变量'，那么该方法就应该被设计成静态方法。
--------------------------------------------------------------------------------------------------------------------------
3. static修饰成员变量(静态变量) :
	1. 使用 static 关键字来修饰成员变量.
	2. 调用：类名.变量名、对象.变量名
	3. 特点：该变量被称作静态变量,被所有实例共享。静态变量在内存中独一份，一旦修改，其他对象的该变量值一并被修改。
	4. 应用：当类中的变量为所有对象所共有，就应该定义为静态变量。

	需求 : 例如某个学校所有学生共享同一个学校名称.
	            此时完全不必在每个学生对象所占用的内存空间中都定义一个变量来表示学校名称.
		  而可以使用 static 关键字在静态区定义一个表示学校名称的变量让所有对象来共享.
--------------------------------------------------------------------------------------------------------------------------
4. 静态方法 static修饰的方法 (类方法)   与    非静态方法 (对象方法)   的使用注意事项 :
	区别1 : 调用格式
		           静态方法 :		类名.方法名();对象名.方法名();
			非静态方法 :	对象名.方法名();
	区别2: 时间 (类先于对象被加载, 先有类,才有对象)
		    静态方法 :	在类加载时存放到方法区的 `静态区` 中, 直接使用类名调用, 无需对象.
		    非静态方法 :	非静态方法依赖与对象的调用. 必须先有对象, 才能调用 `非静态方法`.

	区别3: 静态关键字是一个修饰符。可以修饰类中的对象方法和成员属性。
	              不能修饰构造方法, 因为构造方法就是用来初始化对象的.
		  注意：static 关键字和对象没有任何关系, 构造方法就是用来创建和初始化对象的. 所以不能混合使用.

	区别4: 静态方法中不能调用非静态方法和属性,因为静态方法中没有 this, 无法确定是具体哪一个对象调用.
		   非静态方法可以调用静态方法和静态属性。

	区别5: 静态方法中不能使用this 和 super关键字。
		this关键字它表示的是当前调用这个方法的那个对象。而在静态方法中是没有对象的。
--------------------------------------------------------------------------------------------------------------------------
5. 静态修饰的优劣
	1. 优点
		1. 节省内存中开辟对象的空间
		2. 提升了程序的执行效率
	2. 缺点
		1. 静态方法无法访问非静态方法和属性
--------------------------------------------------------------------------------------------------------------------------
6. 静态代码块
		1. 局部代码块（知道）：控制变量的生命周期，没意义
		2. 构造代码块（知道）：存在于类中的成员位置，每创建一个对象执行一次（先于构造方法执行，但作用雷同，所以几乎不用）
		3. 静态代码块
			1. 它优先于主方法执行、优先于构造代码块执行，当以任意形式第一次使用到该类时执行。
			2. 该类不管创建多少对象，静态代码块只执行一次，可用于给静态变量赋值，用来给类进行初始化。
			3. 应用：后面学到的数据库中应用（第一步注册数据库驱动，这块代码在整个系统中只需要执行一次，所以使用静态代码块）。

--------------------------------------------------------------------------------------------------------------------------
7. 动物联合声明案例
	步骤一 : 定义一个 `共性` 类.   行为: 联合声明 (decleration)
	步骤二 : 定义一个 `Dog` 类. 继承 `Animal` 类, 子类无条件拥有父类中所有可继承的 `属性和行为`.  (不可继承: 构造方法)
	步骤三 : Fox extends Animal    获取 decleration() 行为，重写了该方法。

	 继承的好处: Fox 可以不重写该方法, 可以直接继承.
	继承的缺点: 继承后重写方法，打破了 `类` 的封装性.
--------------------------------------------------------------------------------------------------------------------------
8. final 关键字 :
	final 关键字是用于修饰类,变量和方法,它有"这是无法改变的"或者"最终"的含义.
	特点 :
	1.	final 修饰的类不能被继承.即不能有子类.
	2.	final 修饰的方法不能被子类重写.老老实实继承,不允许做任何篡改.
	3.	final 修饰的变量(成员变量和局部变量)是常量,由于常量在运行期间不允许再发生改变,所以常量在声明时没有默认值, 这就要求程序在声明常量时必须指定该常量的值.
		1. 局部变量：因为在运行时才创建，所以可以先定义后初始化
		2. 成员变量：因为在类加载时已经创建，所以必须声明时进行初始化（系统的方法 `静态代码块, 构造方法, 构造代码块`）
		3. 一个原则：final修饰的变量在被调用的时候必须有值
	注意：由于final修饰的变量是常量，我们开发中为了和变量名有区别，因此所有的被final修饰的变量名统一大写。

	总结：不可继承（类）、不可重写（方法）、不可修改（属性）
------------------------------------------------------------------------------------------------------------------------
9. 包的声明和访问
	1. 包的概念：java用包的形式对类进行管理，一般是用公司的网址倒序命名
	2. package cn.warrior; //包的声明，必须在有效代码的第一行
	3. 包的访问和导包（其实导的不是包，是类）：
		1.写全类名
		2.简化形式 import导入（快捷键 ctrl +shift + O）
	4. 同一个包中的类不用导
	5. java.lang包中的所有类是默认导入String、Object（但是子包没有，例如java.lang.reflect.Field）



